Using the client/server classes should be relativlely simple.

Use CLIMain.java in src\uchat\main as an example of how a UI uses the client/server

First a server must be created: 
Server server = new Server(PORT); where PORT is the port# our app will use
The server will generate connection and error messages,
these can be reteieved by calling server.getMessages()
This will return an ArrayList<Message> of all the server's messages.
For each Message, message.getText and message.getName can be used 
	to get the sender name and text of the message
A timer can be used to get the messages from the server at a regular interval
see CLIMain as an example of how to do this

A client must also be created for both the one hosting and those who join:
Client client = new Client(ip, PORT, name, pic);  
ip is the ip address of the server, PORT is the app's port #, name is the user's name
and pic is the users pic. Sending images over a stream is not available at this time.
Like server getMessages() must be called to retrieve connection/error messages,
as well as the chat communications. 
Use a timer, like with the server
Additionally messages must be sent from the UI to be streamed to the server:
client.sendMessage(text_message, image);
where text_message is the chat text and image is an image to be sent
image sending is not supported

Messages can be differentiated by their enumeration types:
Message.messageType.ERROR (error messages)
Message.messageType.TEXT (these are the chat messages from the client)
Message.messageType.ALERT (Connection messages)
Message.messageType.CONNECT (ignore for now)
Message.messageType.EXIT (used to signal that client is leaving, can ignore)
Different message types can be differentiated by color and/or location by the GUI
messages from the client and server should be differentiated visually as well
Message attributes that can be retrieved:
message.getText()
message.getName()
message.getID()    -string containing clients ip/port# 
message.getType()  -returns the Message.messageType

There were other things I had wanted to implement, but they were causing
a lot of issues so I reverted my progress.
As it is now, the network layer is a complex mess of threads;
if there is an error, it's better to restart the app then to try to let it fix itself
I will continue to update the app until Thursday.

UPDATE: Added moderation tools
To exit a client from the chat server, the client sends a message .bye;
client.sendMessage(".bye", null);
Use the getLocalAddress() method in CLIMain to get the IP address of the local device

The one hosting the chat can obtain a list of users by calling:
server.getUsers(); returns an ArrayList<User> of users
User objects have the following accessor methods:
getName()     -user name
getAddress()  -user ip address
getID()       -unique ID
isBanned()    -whether user is banned
You may call getUsers at intervals with a timer to have a continuous display 

Users may be banned by calling:
server.banUser(int userID); where userID is an id obtained from User.getID() 

See CLIMain for an example of how a UI implements these functions

Contact me at dale7642@gmail.com for any questions
